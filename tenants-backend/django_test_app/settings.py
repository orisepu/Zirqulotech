"""Django settings for test_django_tenants project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from corsheaders.defaults import default_headers
import sys
from decouple import config, Csv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent
PYTHON_EXE = sys.executable  # así "views.py" tendrá el path correcto de la venv

# Product Configuration
PRECIOS_B2B_MODEL = config("PRECIOS_B2B_MODEL", default="productos.PrecioRecompra")
CAPACIDAD_MODEL = config("CAPACIDAD_MODEL", default="productos.Capacidad")
CAPACIDAD_GB_FIELD = config("CAPACIDAD_GB_FIELD", default="tamaño")
CAPACIDAD_REL_MODEL_FIELD = config("CAPACIDAD_REL_MODEL_FIELD", default="modelo")
REL_MODELO_NAME_FIELD = config("REL_MODELO_NAME_FIELD", default="descripcion")
EQUIVALENCIAS_CSV = config("EQUIVALENCIAS_CSV", default="/srv/checkouters/Partners/tenants-backend/equivalencias_modelos.csv")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())


# Application definition

SHARED_APPS = [
    "corsheaders",
    # django-tenants app
    "django_tenants",
    # django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # django-tenant-users apps
    "tenant_users.permissions",
    "tenant_users.tenants",
    "django_filters",
    # Security apps
    "axes",  # Django Axes - Protección contra fuerza bruta
    "security",  # Sistema de seguridad con geolocalización
    # Test project apps
    "progeek",
    'productos',
    'notificaciones',
    "django_test_app.companies",
    "django_test_app.users",
]

TENANT_APPS = [
    "django.contrib.auth",
    "django.contrib.admin",
    "django.contrib.contenttypes",
    "tenant_users.permissions",
    'checkouters',
    "chat",
]

INSTALLED_APPS = list(SHARED_APPS) + [
    app for app in TENANT_APPS if app not in SHARED_APPS
]


# django-tenant-users settings
TENANT_USERS_DOMAIN = config("TENANT_USERS_DOMAIN", default="progeek.es")
AUTHENTICATION_BACKENDS = (
    "axes.backends.AxesBackend",  # Django Axes debe estar primero
    "tenant_users.permissions.backend.UserBackend",
)
AUTH_USER_MODEL = "users.TenantUser"

# django-tenants settings
TENANT_MODEL = "companies.Company"
TENANT_DOMAIN_MODEL = "companies.Domain"


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django_test_app.middleware.custom_tenant_middleware.HeaderTenantMiddleware",
    "django_test_app.middleware.custom_tenant_middleware.FixedTimeZoneMiddleware",
    #'django_test_app.middleware.public_route_bypass.UnifiedTenantMiddleware',
    "django_test_app.middleware.tenant_logging.RequestLoggingMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Servir archivos estáticos en producción
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "axes.middleware.AxesMiddleware",  # Django Axes - Debe estar después de AuthenticationMiddleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
ASGI_APPLICATION = "django_test_app.asgi.application"
WSGI_APPLICATION = "django_test_app.wsgi.application"
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(config("REDIS_HOST", default="127.0.0.1"), config("REDIS_PORT", default=6379, cast=int))],
        },
    },
}
# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DB_ENGINE", default="django_tenants.postgresql_backend"),
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default="5432"),
    },
}

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",
                    "django_test_app.routers.TenantOnlyRouter",
                    )


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []
CORS_ALLOW_ALL_ORIGINS = config("CORS_ALLOW_ALL_ORIGINS", default=False, cast=bool)
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.progeek\.es$",
    r"^https://.*\.zirqulotech\.com$",
]
CORS_ALLOW_HEADERS = list(default_headers) + ["Authorization", "X-Tenant"]
CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS", cast=Csv())
CORS_ALLOW_CREDENTIALS = True
# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "es-es"

TIME_ZONE = "Europe/Madrid"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Email Configuration
# Soporta tanto OAuth2 (Microsoft 365) como SMTP tradicional
EMAIL_BACKEND = config("EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")

# Microsoft 365 OAuth2 Configuration (preferido)
MICROSOFT_CLIENT_ID = config("MICROSOFT_CLIENT_ID", default="")
MICROSOFT_CLIENT_SECRET = config("MICROSOFT_CLIENT_SECRET", default="")
MICROSOFT_TENANT_ID = config("MICROSOFT_TENANT_ID", default="")

# SMTP Configuration (fallback)
EMAIL_HOST = config("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
ROOT_URLCONF = "django_test_app.urls"

# Media Urls
MEDIA_URL = "/media/"
MEDIA_ROOT = Path(config("MEDIA_ROOT", default="/srv/checkouters/Partners/media"))

# carpeta privada dentro de MEDIA_ROOT
PRIVATE_MEDIA_ROOT = MEDIA_ROOT / "media_private"

OTP_TTL_MINUTES = config("OTP_TTL_MINUTES", default=10, cast=int)
OTP_COOLDOWN_SECONDS = config("OTP_COOLDOWN_SECONDS", default=60, cast=int)

FRONTEND_BASE_URL = config("FRONTEND_BASE_URL", default="https://zirqulotech.com")
LEGAL_DEFAULT_OVERRIDES = {
    "operador": {
        "nombre": config("LEGAL_OPERATOR_NAME", default="Zirqulotech S.L."),
        "cif": config("LEGAL_OPERATOR_CIF", default="B00X00000"),
        "direccion": config("LEGAL_OPERATOR_ADDRESS", default="C/ Ejemplo 123, 08000 Barcelona, España"),
        "email": config("LEGAL_OPERATOR_EMAIL", default="legal@zirqulotech.es"),
        "telefono": config("LEGAL_OPERATOR_PHONE", default="+34 600 000 000"),
        "web": config("LEGAL_OPERATOR_WEB", default="https://zirqulotech.es"),
    }
}

# Device Mapping V2 Configuration
# Sistema de mapeo inteligente con estrategias híbridas por tipo de dispositivo
MAPPING_V2_ENABLED = config("MAPPING_V2_ENABLED", default=True, cast=bool)
MAPPING_V2_PERCENTAGE = config("MAPPING_V2_PERCENTAGE", default=100, cast=int)
MAPPING_V2_DEVICE_TYPES = config("MAPPING_V2_DEVICE_TYPES", default="mac,iphone,ipad", cast=Csv())
COMPARE_MAPPING_VERSIONS = config("COMPARE_MAPPING_VERSIONS", default=True, cast=bool)

# Security Configuration
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default=False, cast=bool)
SESSION_COOKIE_SECURE = config("SESSION_COOKIE_SECURE", default=False, cast=bool)
CSRF_COOKIE_SECURE = config("CSRF_COOKIE_SECURE", default=False, cast=bool)
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", cast=Csv())

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'detailed',
        },
    },
    'formatters': {
        'detailed': {
            'format': '[{levelname}] {name}: {message}',
            'style': '{',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',  # Nivel base más restrictivo
        'propagate': False,
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',  # Solo warnings y errores de Django
        },
        'django_test_app.middleware': {
            'handlers': ['console'],
            'level': 'WARNING',  # Solo errores HTTP 4xx/5xx
            'propagate': False,
        },
        'django_test_app.middleware.custom_tenant_middleware': {
            'handlers': ['console'],
            'level': 'WARNING',  # Solo problemas de tenant resolution
            'propagate': False,
        },
        'checkouters': {
            'handlers': ['console'],
            'level': 'INFO',  # Reducido de DEBUG a INFO
            'propagate': False,
        },
        "b2c.contratos": {
            "handlers": ["console"],
            "level": "INFO"
        },
        'security': {
            'handlers': ['console'],
            'level': 'INFO',  # Mantener info para logins
            'propagate': False,
        },
        'chat': {
            'handlers': ['console'],
            'level': 'INFO',  # Info para conexiones WebSocket
            'propagate': False,
        },
        'notificaciones': {
            'handlers': ['console'],
            'level': 'WARNING',  # Solo warnings (rechazos) y errores
            'propagate': False,
        },
        'productos': {
            'handlers': ['console'],
            'level': 'WARNING',  # Reducir ruido de auto_learning
            'propagate': False,
        },
        'daphne': {
            'handlers': ['console'],
            'level': 'ERROR',  # Solo errores críticos de Daphne (WebSocket server)
            'propagate': False,
        },
        'daphne.server': {
            'handlers': ['console'],
            'level': 'ERROR',  # Silenciar logs de conexiones WebSocket
            'propagate': False,
        },
        'daphne.ws_protocol': {
            'handlers': ['console'],
            'level': 'ERROR',  # Silenciar logs de protocolo WebSocket
            'propagate': False,
        },
    },
}

# ========================================
# SECURITY: Geolocalización de logins
# ========================================

# GeoIP2 Database Path
# Base de datos GeoLite2-City.mmdb para geolocalización de IPs
GEOIP_PATH = BASE_DIR.parent / 'data' / 'geoip'

# MaxMind License Key para descargar actualizaciones de GeoLite2
# Obtén tu key gratuita en: https://www.maxmind.com/en/geolite2/signup
MAXMIND_LICENSE_KEY = config("MAXMIND_LICENSE_KEY", default="")

# Location Security Settings
# Sistema de detección de logins sospechosos basado en ubicación
LOCATION_SECURITY_ENABLED = config("LOCATION_SECURITY_ENABLED", default=True, cast=bool)

# Umbral de distancia en kilómetros para alertas
# Si el usuario se mueve más de esta distancia, se envía alerta
LOCATION_ALERT_THRESHOLD_KM = config("LOCATION_ALERT_THRESHOLD_KM", default=500, cast=int)

# Umbral de tiempo en horas para detectar viajes imposibles
# Si el usuario se mueve LOCATION_ALERT_THRESHOLD_KM en menos de estas horas, se bloquea
LOCATION_ALERT_THRESHOLD_HOURS = config("LOCATION_ALERT_THRESHOLD_HOURS", default=4, cast=int)

# ========================================
# SECURITY: Django Axes - Protección contra fuerza bruta
# ========================================

# Configuración de Django Axes para protección contra ataques de fuerza bruta
# Documentación: https://django-axes.readthedocs.io/

# Número máximo de intentos fallidos antes de bloquear
AXES_FAILURE_LIMIT = config("AXES_FAILURE_LIMIT", default=5, cast=int)

# Tiempo de bloqueo en horas (None = permanente hasta reset manual)
AXES_COOLOFF_TIME = config("AXES_COOLOFF_TIME", default=1, cast=int)  # 1 hora

# Bloquear por combinación de username + IP (más seguro)
# Nueva sintaxis para django-axes 7.x
AXES_LOCKOUT_PARAMETERS = [["username", "ip_address"]]

# Usar modelo de usuario personalizado
AXES_USERNAME_FORM_FIELD = "email"  # TenantUser usa 'email' en lugar de 'username'

# Resetear intentos tras login exitoso
AXES_RESET_ON_SUCCESS = True

# Registrar intentos de acceso en la base de datos
AXES_ENABLE_ACCESS_FAILURE_LOG = True

# Verbose logging (desactivado para reducir ruido en consola)
AXES_VERBOSE = False

# No bloquear IPs de whitelist (localhost, IPs privadas)
# Comentado temporalmente para testing
# AXES_NEVER_LOCKOUT_WHITELIST = True
# AXES_IP_WHITELIST = ['127.0.0.1', 'localhost']

# Handler personalizado para lockout
# AXES_LOCKOUT_TEMPLATE = None  # Usa respuesta JSON por defecto
# AXES_LOCKOUT_URL = None  # Usa respuesta JSON por defecto

# Cache backend (usar redis en producción para mejor rendimiento)
AXES_CACHE = 'default'