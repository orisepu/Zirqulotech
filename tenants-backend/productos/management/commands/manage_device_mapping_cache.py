"""
Comando de gesti√≥n para administrar el cach√© de mapeo de dispositivos.
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.db import transaction

from productos.models import DeviceMapping, MappingMetrics
from productos.services.incremental_mapping import IncrementalMappingService, MappingOptimizer
from productos.services.monitoring import MappingMonitoringService


class Command(BaseCommand):
    help = """
    Gestiona el cach√© de mapeo de dispositivos.

    Subcomandos disponibles:
    - cleanup: Limpia mappings antiguos no confirmados
    - optimize: Optimiza mappings de baja confianza
    - rebuild: Reconstruye cach√© para una marca espec√≠fica
    - health: Muestra estado de salud del sistema
    - report: Genera reporte de rendimiento
    - invalidate: Invalida mappings espec√≠ficos
    """

    def add_arguments(self, parser):
        # Subcomando principal
        parser.add_argument('action', type=str, choices=[
            'cleanup', 'optimize', 'rebuild', 'health', 'report', 'invalidate'
        ], help='Acci√≥n a realizar')

        # Argumentos opcionales
        parser.add_argument('--brand', type=str, help='Marca espec√≠fica para algunas acciones')
        parser.add_argument('--days', type=int, default=30, help='D√≠as para limpieza/reporte (default: 30)')
        parser.add_argument('--min-confidence', type=int, default=40, help='Confianza m√≠nima para optimizaci√≥n (default: 40)')
        parser.add_argument('--force', action='store_true', help='Forzar acci√≥n sin confirmaci√≥n')
        parser.add_argument('--dry-run', action='store_true', help='Simular acci√≥n sin aplicar cambios')

    def handle(self, *args, **options):
        action = options['action']

        try:
            if action == 'cleanup':
                self.handle_cleanup(options)
            elif action == 'optimize':
                self.handle_optimize(options)
            elif action == 'rebuild':
                self.handle_rebuild(options)
            elif action == 'health':
                self.handle_health(options)
            elif action == 'report':
                self.handle_report(options)
            elif action == 'invalidate':
                self.handle_invalidate(options)
            else:
                raise CommandError(f"Acci√≥n '{action}' no reconocida")

        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING("Operaci√≥n cancelada por el usuario"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"Error: {e}"))
            raise

    def handle_cleanup(self, options):
        """Limpia mappings antiguos no confirmados."""
        days = options['days']
        dry_run = options['dry_run']
        force = options['force']

        self.stdout.write(f"üßπ Iniciando limpieza de mappings antiguos (>{days} d√≠as)")

        service = IncrementalMappingService()

        if dry_run:
            # Contar mappings que se limpiar√≠an
            cutoff_date = timezone.now() - timezone.timedelta(days=days)
            count = DeviceMapping.objects.filter(
                is_active=True,
                last_confirmed_at__lt=cutoff_date,
                times_confirmed=1,
                confidence_score__lt=60
            ).count()

            self.stdout.write(
                self.style.WARNING(f"[DRY RUN] Se limpiar√≠an {count} mappings antiguos")
            )
            return

        if not force:
            confirmation = input(f"¬øConfirmar limpieza de mappings no confirmados en {days} d√≠as? (y/N): ")
            if confirmation.lower() != 'y':
                self.stdout.write("Operaci√≥n cancelada")
                return

        with transaction.atomic():
            cleaned_count = service.cleanup_old_mappings(days)

        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ Limpiados {cleaned_count} mappings antiguos")
        )

    def handle_optimize(self, options):
        """Optimiza mappings de baja confianza."""
        min_confidence = options['min_confidence']
        dry_run = options['dry_run']

        self.stdout.write(f"‚ö° Optimizando mappings con confianza < {min_confidence}")

        if dry_run:
            count = DeviceMapping.objects.filter(
                is_active=True,
                confidence_score__lt=min_confidence,
                needs_review=False
            ).count()

            self.stdout.write(
                self.style.WARNING(f"[DRY RUN] Se optimizar√≠an {count} mappings de baja confianza")
            )
            return

        optimizer = MappingOptimizer()
        result = optimizer.optimize_low_confidence_mappings(min_confidence)

        self.stdout.write("üìä Resultados de optimizaci√≥n:")
        self.stdout.write(f"   Procesados: {result['processed']}")
        self.stdout.write(f"   Mejorados: {result['improved']}")
        self.stdout.write(f"   Marcados para revisi√≥n: {result['marked_for_review']}")

        if result['improved'] > 0:
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ Optimizados {result['improved']} mappings")
            )

    def handle_rebuild(self, options):
        """Reconstruye cach√© para una marca espec√≠fica."""
        brand = options['brand']
        force = options['force']
        dry_run = options['dry_run']

        if not brand:
            raise CommandError("Se requiere especificar --brand para rebuild")

        self.stdout.write(f"üîÑ Reconstruyendo cach√© para marca: {brand}")

        if dry_run:
            count = DeviceMapping.objects.filter(
                source_brand__iexact=brand,
                is_active=True
            ).count()

            self.stdout.write(
                self.style.WARNING(f"[DRY RUN] Se invalidar√≠an {count} mappings de {brand}")
            )
            return

        if not force:
            confirmation = input(f"¬øConfirmar reconstrucci√≥n de cach√© para {brand}? (y/N): ")
            if confirmation.lower() != 'y':
                self.stdout.write("Operaci√≥n cancelada")
                return

        optimizer = MappingOptimizer()

        with transaction.atomic():
            invalidated_count = optimizer.rebuild_cache_for_brand(brand)

        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ Invalidados {invalidated_count} mappings de {brand}")
        )
        self.stdout.write("‚ÑπÔ∏è  Ejecuta la pr√≥xima actualizaci√≥n para regenerar cach√©")

    def handle_health(self, options):
        """Muestra estado de salud del sistema."""
        hours_back = min(options.get('days', 1) * 24, 168)  # Max 7 d√≠as

        self.stdout.write(f"üè• Estado de salud del sistema (√∫ltimas {hours_back} horas)")

        monitoring = MappingMonitoringService()
        health_status = monitoring.get_health_status(hours_back)

        # Estado general
        status_color = {
            'healthy': self.style.SUCCESS,
            'warning': self.style.WARNING,
            'error': self.style.ERROR,
            'critical': self.style.ERROR
        }.get(health_status.overall_health, self.style.SUCCESS)

        self.stdout.write(f"Estado general: {status_color(health_status.overall_health.upper())}")

        # M√©tricas principales
        self.stdout.write("\nüìä M√©tricas principales:")
        self.stdout.write(f"   Tasa de √©xito: {health_status.mapping_success_rate:.1%}")
        self.stdout.write(f"   Confianza promedio: {health_status.avg_confidence_score:.1f}")
        self.stdout.write(f"   Mappings activos: {health_status.total_active_mappings:,}")
        self.stdout.write(f"   Necesitan revisi√≥n: {health_status.mappings_needing_review:,}")
        self.stdout.write(f"   Fallos recientes: {health_status.recent_failures}")
        self.stdout.write(f"   Score de rendimiento: {health_status.performance_score:.1%}")

        # Alertas
        if health_status.alerts:
            self.stdout.write(f"\nüö® Alertas ({len(health_status.alerts)}):")
            for alert in health_status.alerts:
                alert_color = {
                    'info': self.style.SUCCESS,
                    'warning': self.style.WARNING,
                    'error': self.style.ERROR,
                    'critical': self.style.ERROR
                }.get(alert.level.value, self.style.SUCCESS)

                self.stdout.write(f"   {alert_color(alert.level.value.upper())}: {alert.title}")
                self.stdout.write(f"      {alert.message}")
        else:
            self.stdout.write(f"\n‚úÖ Sin alertas activas")

    def handle_report(self, options):
        """Genera reporte de rendimiento."""
        brand = options.get('brand')
        days = options['days']

        monitoring = MappingMonitoringService()

        if brand:
            self.stdout.write(f"üìà Reporte de rendimiento para {brand} ({days} d√≠as)")
            report = monitoring.get_brand_performance_report(brand, days)
            self._display_brand_report(report)
        else:
            self.stdout.write(f"üìà Reporte diario del sistema")
            report = monitoring.generate_daily_report()
            self._display_daily_report(report)

    def _display_brand_report(self, report):
        """Muestra reporte espec√≠fico de marca."""
        metrics = report['brand_metrics']

        self.stdout.write("\nüìä M√©tricas de la marca:")
        self.stdout.write(f"   Total procesados: {metrics['total_processed'] or 0:,}")
        self.stdout.write(f"   Total exitosos: {metrics['total_successful'] or 0:,}")
        self.stdout.write(f"   Uso de cach√©: {metrics['total_cached'] or 0:,}")
        self.stdout.write(f"   Nuevos creados: {metrics['total_new'] or 0:,}")

        if metrics['total_processed']:
            success_rate = (metrics['total_successful'] or 0) / metrics['total_processed']
            self.stdout.write(f"   Tasa de √©xito: {success_rate:.1%}")

        mapping_stats = report['mapping_stats']
        self.stdout.write("\nüóÇÔ∏è  Mappings activos:")
        self.stdout.write(f"   Total: {mapping_stats['total_active']:,}")
        self.stdout.write(f"   Alta confianza (‚â•80): {mapping_stats['high_confidence']:,}")
        self.stdout.write(f"   Baja confianza (<50): {mapping_stats['low_confidence']:,}")
        self.stdout.write(f"   Necesitan revisi√≥n: {mapping_stats['needs_review']:,}")

        if report['algorithm_distribution']:
            self.stdout.write("\nüîß Distribuci√≥n por algoritmo:")
            for algorithm, count in report['algorithm_distribution'].items():
                self.stdout.write(f"   {algorithm}: {count:,}")

    def _display_daily_report(self, report):
        """Muestra reporte diario."""
        metrics = report['daily_metrics']

        self.stdout.write(f"\nüìÖ Fecha: {report['date']}")
        self.stdout.write("\nüìä M√©tricas del d√≠a:")
        self.stdout.write(f"   Total procesados: {metrics['total_processed'] or 0:,}")
        self.stdout.write(f"   Total exitosos: {metrics['total_successful'] or 0:,}")
        self.stdout.write(f"   Uso de cach√©: {metrics['total_cached_used'] or 0:,}")
        self.stdout.write(f"   Nuevos creados: {metrics['total_new_created'] or 0:,}")

        if metrics['total_processed']:
            success_rate = (metrics['total_successful'] or 0) / metrics['total_processed']
            self.stdout.write(f"   Tasa de √©xito: {success_rate:.1%}")

        # Top marcas
        top_brands = report['top_brands']
        if top_brands:
            self.stdout.write("\nüèÜ Top marcas del d√≠a:")
            for i, brand_data in enumerate(top_brands[:5], 1):
                self.stdout.write(
                    f"   {i}. {brand_data['brand']}: {brand_data['total']:,} "
                    f"({brand_data['success_rate']:.1f}% √©xito)"
                )

        # Atenci√≥n necesaria
        attention = report['attention_needed']
        self.stdout.write("\n‚ö†Ô∏è  Requieren atenci√≥n:")
        self.stdout.write(f"   Baja confianza: {attention['low_confidence']:,}")
        self.stdout.write(f"   Necesitan revisi√≥n: {attention['needs_review']:,}")
        self.stdout.write(f"   Antiguos sin confirmar: {attention['old_unconfirmed']:,}")

    def handle_invalidate(self, options):
        """Invalida mappings espec√≠ficos."""
        brand = options.get('brand')
        force = options['force']
        dry_run = options['dry_run']

        if not brand:
            raise CommandError("Se requiere especificar --brand para invalidate")

        # Filtros de invalidaci√≥n
        filters = {'source_brand__iexact': brand, 'is_active': True}

        if dry_run:
            count = DeviceMapping.objects.filter(**filters).count()
            self.stdout.write(
                self.style.WARNING(f"[DRY RUN] Se invalidar√≠an {count} mappings de {brand}")
            )
            return

        if not force:
            confirmation = input(f"¬øConfirmar invalidaci√≥n de mappings para {brand}? (y/N): ")
            if confirmation.lower() != 'y':
                self.stdout.write("Operaci√≥n cancelada")
                return

        with transaction.atomic():
            updated = DeviceMapping.objects.filter(**filters).update(
                is_active=False,
                invalidated_at=timezone.now(),
                invalidation_reason=f"Manual invalidation via management command"
            )

        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ Invalidados {updated} mappings de {brand}")
        )