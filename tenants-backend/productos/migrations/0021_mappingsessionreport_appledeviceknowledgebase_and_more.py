# Generated by Django 5.2.4 on 2025-09-28 10:16

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('productos', '0020_optimize_device_mapping_indexes'),
    ]

    operations = [
        migrations.CreateModel(
            name='MappingSessionReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tarea_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('total_devices_processed', models.IntegerField(default=0)),
                ('successfully_mapped', models.IntegerField(default=0)),
                ('failed_mappings', models.IntegerField(default=0)),
                ('high_confidence_mappings', models.IntegerField(default=0)),
                ('medium_confidence_mappings', models.IntegerField(default=0)),
                ('low_confidence_mappings', models.IntegerField(default=0)),
                ('devices_by_type', models.JSONField(default=dict, help_text='Estadísticas por source_type')),
                ('algorithms_used', models.JSONField(default=dict, help_text='Conteo por algoritmo usado')),
                ('total_processing_time_ms', models.IntegerField(default=0)),
                ('avg_processing_time_ms', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8)),
                ('peak_memory_usage_mb', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('mappings_needing_review', models.IntegerField(default=0)),
                ('new_knowledge_discovered', models.JSONField(default=list, help_text='Nuevos A-numbers o patrones descubiertos')),
                ('problematic_patterns', models.JSONField(default=list, help_text='Patrones que causaron problemas')),
                ('recommendations', models.JSONField(default=list, help_text='Recomendaciones generadas automáticamente')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generation_time_ms', models.IntegerField(default=0, help_text='Tiempo para generar este reporte')),
            ],
            options={
                'db_table': 'productos_mapping_session_report',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AppleDeviceKnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_family', models.CharField(choices=[('iPhone', 'iPhone'), ('iPad', 'iPad'), ('iPad Pro', 'iPad Pro'), ('iPad Air', 'iPad Air'), ('iPad mini', 'iPad mini'), ('Mac mini', 'Mac mini'), ('iMac', 'iMac'), ('iMac Pro', 'iMac Pro'), ('MacBook Air', 'MacBook Air'), ('MacBook Pro', 'MacBook Pro'), ('Mac Pro', 'Mac Pro'), ('Mac Studio', 'Mac Studio'), ('Apple Watch', 'Apple Watch')], db_index=True, max_length=50)),
                ('model_name', models.CharField(help_text='Nombre comercial del modelo (ej: iPhone 15 Pro)', max_length=100)),
                ('a_number', models.CharField(db_index=True, help_text='A-number oficial de Apple (ej: A3108)', max_length=8, unique=True)),
                ('release_date', models.DateField(help_text='Fecha de lanzamiento oficial')),
                ('cpu_family', models.CharField(blank=True, help_text='Familia de CPU (ej: A17 Pro, M2 Pro)', max_length=50)),
                ('cpu_cores', models.CharField(blank=True, help_text='Configuración de cores (ej: 8 Core CPU 10 Core GPU)', max_length=100)),
                ('screen_size', models.DecimalField(decimal_places=1, help_text='Tamaño de pantalla en pulgadas', max_digits=4, null=True)),
                ('available_capacities', models.JSONField(help_text='Capacidades disponibles en GB [128, 256, 512, 1024]')),
                ('likewize_model_names', models.JSONField(help_text='Nombres que aparecen en M_Model de Likewize')),
                ('likewize_master_patterns', models.JSONField(help_text='Patrones que aparecen en MasterModelName')),
                ('likewize_full_patterns', models.JSONField(default=list, help_text='Patrones completos en ModelName/FullName')),
                ('confidence_level', models.CharField(choices=[('verified', 'Verificado oficialmente'), ('high_confidence', 'Alta confianza'), ('inferred', 'Inferido de fuentes múltiples'), ('estimated', 'Estimado'), ('needs_verification', 'Necesita verificación')], default='needs_verification', max_length=20)),
                ('source', models.CharField(help_text='Fuente de la información (apple_official, everymac, manual, etc.)', max_length=50)),
                ('verification_notes', models.TextField(blank=True, help_text='Notas sobre la verificación de la información')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, help_text='Usuario que creó esta entrada', max_length=100)),
            ],
            options={
                'db_table': 'productos_apple_device_knowledge',
                'ordering': ['device_family', 'release_date', 'model_name'],
                'indexes': [models.Index(fields=['device_family', 'a_number'], name='productos_a_device__a80800_idx'), models.Index(fields=['model_name', 'device_family'], name='productos_a_model_n_e3df2f_idx'), models.Index(fields=['confidence_level', 'device_family'], name='productos_a_confide_268b80_idx'), models.Index(fields=['release_date', 'device_family'], name='productos_a_release_a6edc0_idx')],
                'unique_together': {('device_family', 'model_name', 'a_number')},
            },
        ),
        migrations.CreateModel(
            name='DeviceMappingV2',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_signature', models.CharField(db_index=True, help_text='Hash único del dispositivo basado en datos clave', max_length=512, unique=True)),
                ('source_data', models.JSONField(help_text='JSON completo de Likewize tal como se recibió')),
                ('source_type', models.CharField(choices=[('mac', 'Mac Desktop/Laptop'), ('iphone', 'iPhone'), ('ipad', 'iPad'), ('watch', 'Apple Watch'), ('other', 'Otros dispositivos Apple')], db_index=True, max_length=20)),
                ('extracted_a_number', models.CharField(blank=True, db_index=True, help_text='A-number extraído de los datos (ej: A2348)', max_length=8)),
                ('extracted_model_name', models.CharField(blank=True, help_text='Nombre del modelo normalizado', max_length=200)),
                ('extracted_cpu', models.CharField(blank=True, help_text='CPU/Procesador extraído', max_length=100)),
                ('extracted_year', models.IntegerField(db_index=True, help_text='Año de lanzamiento extraído', null=True)),
                ('extracted_month', models.IntegerField(help_text='Mes de lanzamiento extraído', null=True)),
                ('extracted_capacity_gb', models.IntegerField(db_index=True, help_text='Capacidad en GB extraída', null=True)),
                ('extracted_screen_size', models.DecimalField(decimal_places=1, help_text='Tamaño de pantalla en pulgadas', max_digits=4, null=True)),
                ('confidence_score', models.IntegerField(help_text='Puntuación de confianza 0-100')),
                ('mapping_algorithm', models.CharField(choices=[('a_number_direct', 'Mapeo directo por A-number'), ('exact_name_match', 'Coincidencia exacta de nombre'), ('tech_specs_match', 'Coincidencia por especificaciones'), ('fuzzy_similarity', 'Similitud difusa'), ('ml_prediction', 'Predicción por ML'), ('heuristic_rules', 'Reglas heurísticas'), ('manual_override', 'Mapeo manual')], max_length=50)),
                ('decision_path', models.JSONField(help_text='Pasos detallados del algoritmo de decisión')),
                ('candidates_considered', models.JSONField(help_text='Todas las opciones de mapeo consideradas')),
                ('rejection_reasons', models.JSONField(help_text='Por qué se rechazaron otras opciones')),
                ('processing_time_ms', models.IntegerField(help_text='Tiempo de procesamiento en milisegundos')),
                ('memory_usage_mb', models.DecimalField(decimal_places=2, help_text='Uso de memoria durante el procesamiento', max_digits=8, null=True)),
                ('validated_by_user', models.BooleanField(default=False, help_text='Si un usuario ha validado este mapeo')),
                ('validation_feedback', models.CharField(blank=True, choices=[('correct', 'Correcto'), ('incorrect', 'Incorrecto'), ('partial', 'Parcialmente correcto'), ('needs_review', 'Necesita revisión')], max_length=20)),
                ('user_notes', models.TextField(blank=True, help_text='Notas del usuario sobre el mapeo')),
                ('needs_review', models.BooleanField(db_index=True, default=False, help_text='Marcado para revisión manual')),
                ('review_reason', models.CharField(blank=True, help_text='Razón por la que necesita revisión', max_length=200)),
                ('algorithm_version', models.CharField(default='2.0', help_text='Versión del algoritmo usado', max_length=20)),
                ('experiment_group', models.CharField(blank=True, help_text='Grupo experimental para A/B testing', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mapped_capacity', models.ForeignKey(help_text='Capacidad mapeada en nuestra BD', on_delete=django.db.models.deletion.CASCADE, to='productos.capacidad')),
            ],
            options={
                'db_table': 'productos_device_mapping_v2',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MappingAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tarea_id', models.CharField(db_index=True, help_text='ID de la tarea de actualización', max_length=50)),
                ('device_signature', models.CharField(db_index=True, help_text='Signature del dispositivo procesado', max_length=512)),
                ('algorithm_used', models.CharField(help_text='Algoritmo que produjo el resultado final', max_length=50)),
                ('confidence_score', models.IntegerField(help_text='Puntuación de confianza final')),
                ('available_candidates', models.JSONField(help_text='Todas las opciones de mapeo disponibles con scores')),
                ('decision_factors', models.JSONField(help_text='Factores que influyeron en la decisión final')),
                ('rejected_candidates', models.JSONField(help_text='Candidatos rechazados con razones específicas')),
                ('algorithm_chain', models.JSONField(help_text='Secuencia de algoritmos intentados con resultados')),
                ('processing_time_ms', models.IntegerField(help_text='Tiempo total de procesamiento')),
                ('memory_usage_mb', models.DecimalField(decimal_places=2, help_text='Pico de uso de memoria', max_digits=8, null=True)),
                ('database_queries', models.IntegerField(default=0, help_text='Número de queries a BD ejecutadas')),
                ('automatic_quality_score', models.IntegerField(help_text='Score automático de calidad del mapeo', null=True)),
                ('quality_flags', models.JSONField(default=list, help_text='Flags automáticos de calidad detectados')),
                ('needs_review', models.BooleanField(db_index=True, default=False)),
                ('review_reason', models.CharField(blank=True, max_length=200)),
                ('user_validation', models.CharField(choices=[('pending', 'Pendiente de validación'), ('correct', 'Validado como correcto'), ('incorrect', 'Marcado como incorrecto'), ('partially_correct', 'Parcialmente correcto'), ('disputed', 'En disputa')], default='pending', max_length=20)),
                ('validator_user', models.CharField(blank=True, help_text='Usuario que validó el mapeo', max_length=100)),
                ('validation_notes', models.TextField(blank=True, help_text='Notas de validación del usuario')),
                ('validation_date', models.DateTimeField(help_text='Fecha de validación por usuario', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('mapping_result', models.ForeignKey(help_text='Resultado del mapeo (null si falló)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='productos.capacidad')),
                ('mapping_v2', models.ForeignKey(help_text='Referencia al mapeo V2 creado', null=True, on_delete=django.db.models.deletion.CASCADE, to='productos.devicemappingv2')),
            ],
            options={
                'db_table': 'productos_mapping_audit_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['source_type', 'extracted_a_number'], name='productos_d_source__d12ab2_idx'),
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['extracted_a_number', 'confidence_score'], name='productos_d_extract_4cf142_idx'),
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['confidence_score', 'created_at'], name='productos_d_confide_520eee_idx'),
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['needs_review', 'validation_feedback'], name='productos_d_needs_r_3f42fb_idx'),
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['algorithm_version', 'source_type'], name='productos_d_algorit_419577_idx'),
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['mapping_algorithm', 'confidence_score'], name='productos_d_mapping_5d5e3c_idx'),
        ),
        migrations.AddIndex(
            model_name='devicemappingv2',
            index=models.Index(fields=['created_at', 'source_type'], name='productos_d_created_e9239a_idx'),
        ),
        migrations.AddIndex(
            model_name='mappingauditlog',
            index=models.Index(fields=['tarea_id', 'algorithm_used'], name='productos_m_tarea_i_790d80_idx'),
        ),
        migrations.AddIndex(
            model_name='mappingauditlog',
            index=models.Index(fields=['tarea_id', 'confidence_score'], name='productos_m_tarea_i_a5b091_idx'),
        ),
        migrations.AddIndex(
            model_name='mappingauditlog',
            index=models.Index(fields=['needs_review', 'user_validation'], name='productos_m_needs_r_927cec_idx'),
        ),
        migrations.AddIndex(
            model_name='mappingauditlog',
            index=models.Index(fields=['automatic_quality_score', 'created_at'], name='productos_m_automat_263ea6_idx'),
        ),
        migrations.AddIndex(
            model_name='mappingauditlog',
            index=models.Index(fields=['algorithm_used', 'processing_time_ms'], name='productos_m_algorit_dea32f_idx'),
        ),
        migrations.AddIndex(
            model_name='mappingauditlog',
            index=models.Index(fields=['created_at', 'processing_time_ms'], name='productos_m_created_cee339_idx'),
        ),
    ]
